[project]
name = "document_agent_service"
version = "0.1.0"
description = "A modular AI agent that ingests diverse documents, segments them by topic, and delivers accurate, user-configured summaries on demand"
authors = [
    {name = "Leslie Ricardo de la Rosa", email = "leslie_ricardo@hotmail.com"},
]
dependencies = [
    "fastapi>=0.116.0",
    "uvicorn[standard]>=0.35.0",
    "langchain>=0.3.0",
    "langchain-openai>=0.3.0",
    "motor>=3.7.0",
    "pymongo>=4.13.0",
    "python-multipart>=0.0.20",
    "watchdog>=6.0.0",
    "python-docx>=1.2.0",
    "pypdf>=4.0.0",
    "python-dotenv>=1.1.0",
    "pydantic[email]>=2.11.0",
    "pydantic-settings>=2.10.0",
    "aiofiles>=24.1.0",
    "langchain-core>=0.3.0",
    "tiktoken>=0.9.0",
    "langchain_google_genai>=0.1.0",
    "click>=8.0.0",
    "langchain-ollama>=0.1.0",
    "tabulate>=0.9.0",
    "httpx>=0.28.0",
]
requires-python = ">=3.10"
readme = "README.md"
license = {text = "MIT"}

[project.optional-dependencies]
dev = [
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "mongomock>=4.1.0",
    "httpx>=0.28.0",
    "ruff>=0.3.0",
    "mypy>=1.9.0",
    "black>=24.0.0",
]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm]
distribution = false

[tool.pdm.scripts]
agent_service = "python -m uvicorn app.api.agent_app:app --reload --host 0.0.0.0 --port 8000"
admin_service = "python -m uvicorn app.api.admin_app:admin_app --reload --host 0.0.0.0 --port 8001"
watcher_service = "python -m app.ingestion.watch_service"
test = "pytest tests"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]

[tool.pdm.dockerize]
include = "*"